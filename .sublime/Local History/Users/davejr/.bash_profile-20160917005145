#*==================================
#*  Author:		 	Dave Luke Jr
#*  Company:	 	CenterStack
#*  Webspte:	 	http://www.centerstack.io
#*  Description:	 	Bash Profile
#*==================================


# ===================================================================#
#	Exports
# ===================================================================#
export MYROOT=/sys
export PATH=/usr/local/bin:/usr/local/sbin:/usr/local/share/npm/bin:/usr/bin:/sys/bin:$PATH
# export DJANGO_SETTINGS_MODULE="main.settings"
export NODE_PATH=/usr/local/lib/node_modules
export PYTHONIOENCODING=UTF-8
export EDITOR='subl -w'
export WORKON_HOME=/sys/virtual-envs
export PROJECT_HOME=/sys/centerstack/projects
export BLOCKSIZE=1000
source /usr/local/bin/virtualenvwrapper.sh
eval "$(hub alias -s)"
shopt -s histappend;
shopt -s cdspell;





# ===================================================================#
#	Basic Commands & Functions
# ===================================================================#
builtin cd $MYROOT
alias c='clear; new_line=false'
alias ls='ls -oAFh'
alias lsr='ls -oAFhr'
alias lsc='ls -oAFhtU'
alias lscr='ls -oAFhtUr'
alias lss='ls -oAFhS'
alias lssr='ls -oAFhSr'
alias lsm='ls -oAFht'
alias lsa="mdls -name kMDItemFSName -name kMDItemDateAdded -raw * | xargs -0 -I {} echo {} | sed 'N;s/\n/ /' | sort"
alias lsmr='ls -oAFhtUrr'
alias lsR='ls -oAFhR'
alias edit='subl'
alias bp='edit ~/.bash_profile'
alias bpa='open -a textedit ~/.bash_profile'
alias bpr='d=$(pwd); source ~/.bash_profile; c; cd $d; printf "\nbash_profile reloaded!\n\n-----------------------------------------------------------\n"'
alias licenses='open /sys/os/licenses/licenses.rtf'
alias cleartrash='rm -rf ~/.Trash/*'
alias lsenv='lssitepackages'
alias less='less -FSRXc'
alias cp='cp -ivpR'
alias rm='rm -rfv'
alias mv='mv -iv'
alias mkdir='mkdir -pv'
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'' | less'
alias copy_path='pwd | pbcopy'
alias notes='open /sys/dev/bash/notes/notes.rtfd'
alias bashnotes='open /sys/dev/bash/notes/bash-notes.rtfd'
function print { printf "$1\n"; }
function youtube { url=$1; youtube-dl -o "$(pwd)/%(title)s.%(ext)s" "$url"; }
function cd { builtin cd "${@:-$MYROOT}"; ls; }
function mkdircd { mkdir -p "$1" && cd "$1"; }								# Creates a folder and gets inside of it
function trash { command mv "$@" ~/.Trash ; }								# Moves a file to the Mac OSX trash
function ql { qlmanage -p "$*" >& /dev/null; }
function mans { man $1 | grep -iC2 --color=always $2 | less; }
function showa { /usr/bin/grep --color=always -i -a1 $@ ~/Library/init/bash/aliases.bash | grep -v '^\s*$' | less -FSRXc ; }
alias htmltidy='tidy -mqi --doctype omit --show-body-only true --show-warnings no --vertical-space no --wrap 0'
alias cdrouter='cd /Volumes/DAVEJR-USB-32/dave'




# ===================================================================#
#	CD Navigation
# ===================================================================#
# Project Folders
alias cdcs="cd /sys/centerstack/site"
alias cddj="cd /sys/centerstack/projects/davelukejr/site"
alias cdbond="cd /sys/centerstack/projects/bond6/site"
alias cdcma="cd /sys/centerstack/projects/cma/site"
alias cdbs="cd /sys/centerstack/projects/bs/site"
alias villa="cd /sys/centerstack/projects/bs/site/static/static_dirs/plugins/villareal/assets"
alias cdcave="cd /sys/centerstack/projects/cave/site"


# Normal
alias logo="cd /sys/centerstack/branding/logo"
alias cdkodi='cd /sys/dev/kodi'
alias cddesk="cd ~/Desktop"
alias cdapps="cd /Applications"
alias cddocu="cd /sys/documentation"
alias cdweb="cd /sys/dev/web"
alias cdassets="cd /sys/dev/web/assets"
alias cdcompletions="cd /sys/os/completions"
alias cddown="cd ~/Downloads"
alias cddocs="cd ~/Documents"
alias cdenv="cd /sys/virtual-envs"
alias cdsubl="cd ~/Library/Application\ Support/Sublime\ Text\ 3"
alias cdfonts="cd /sys/os/fonts"
alias cdbower='cd /sys/packages/bower'
alias cdbrew="cd /usr/local/Cellar/"
alias cdcask="/opt/homebrew-cask/Caskroom"
alias cdicloud='cd ~/Library/Mobile\ Documents/com~apple~CloudDocs'
alias cdmusic="cd /music"


# ===================================================================#
#	Git Project Management
# ===================================================================#
gituser="dave4jr"
gitemail="dave@centerstack.io"
git config --global user.name $gituser
git config --global user.email $gitemail
git config --global push.default simple

# Git notes re: workflow, structure, etc...
alias gitnotes="edit /sys/git/docs/git-notes.pdf"

# Initializing Repository and setting up remote origin
function gitinit() {
	repo="$1";
	git init;
	git add $(pwd);
	git commit -m "Initializing Repo";
	git remote add origin https://github.com/$gituser/$repo.git;
	git push -u origin master
}


# Add and Removing Remote
function gitaddremote() { git add -u remote origin; }
function gitrmremote() { git remote rm origin; }


# Clone a Repo
function gitclone() {
	repo="$1";
	git clone https://github.com/$gituser/$repo.git;
}


# Local to Origin
function gitpushto() {
	git push origin HEAD;
	branch="$1";
	if [[ -z $branch ]]; then
		git push origin HEAD;
	else
		git push origin $branch;
	fi
}


# Origin to Local
function gitpullfrom() {
	branch="$1";
	git fetch origin;
	git rebase âˆ’p origin/develop
}


# Checkout Pull Request
function gitcheckoutpullrequest() {
	pull_request_id="$1";
	new_branch="$2";
	git fetch origin pull/$pull_request_id/head:$new_branch;
	git checkout $new_branch;
}


function backup() {
	commit_message="$1";
	if [[ -z $commit_message ]]; then
		git add -A .;
		git commit -m 'backup commit';
		git push origin master;
	else
		git add -A .;
		git commit -m "$commit_message";
		git push origin master;
	fi
}

function gitrmuntracked() {
	git clean  -d  -fx "";	
}
alias gitgraph='git log --graph --oneline --decorate'
function gituntrack() {
	file="$1";
	git rm -r --cached $file;
}

#git branch -m old_branch new_branch         # Rename branch locally    
#git push origin :old_branch                 # Delete the old branch    
#git push --set-upstream origin new_branch   # Push the new branch, set local branch to track the new remote



# ===================================================================#
#	Finder Operations
# ===================================================================#
# Go Back Navigation
alias b='cd ../'
alias bb='cd ../../'
alias bbb='cd ../../../'
alias bbbb='cd ../../../../'

# File and Folder Operations
alias f='open -a Finder ./'
alias recordscreen="osascript -e 'tell application \"QuickTime Player\" to activate' -e 'tell application \"QuickTime Player\" to start (new screen recording)'"
alias recordmovie="osascript -e 'tell application \"QuickTime Player\" to activate' -e 'tell application \"QuickTime Player\" to start (new movie recording)'"
alias recordaudio="osascript -e 'tell application \"QuickTime Player\" to activate' -e 'tell application \"QuickTime Player\" to start (new audio recording)'"
alias whicha='type -all'
alias options='shopt'
alias cic='set completion-ignore-case On'
alias numFiles='echo $(ls -1 | wc -l)'
alias make1mb='mkfile 1m ./1MB.dat'
alias make5mb='mkfile 5m ./5MB.dat'
alias make10mb='mkfile 10m ./10MB.dat'

# Finder Functions
function findfile() {
	keyword="*$1";
	path="$2";
	if [ -z $path ]; then
		sudo find / -iname $keyword;
	else
		sudo find / -iname $keyword;
	fi
}
function findindir() {
	dir="$1";
	keyword="$2";
	sudo find $dir -iname $keyword;
}
function findincs() {
	dir="/sys/centerstack";
	keyword="$1";
	sudo find $dir -iname $keyword;
}
function findcsrm() {
	keyword="$1";
	find "/sys/centerstack" -iname $keyword -exec rm -r "{}" \;
}
zip () { zip -r "$1".zip "$1" ; }          							# zip:		To create a ZIP archive of a folder
my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command ; }
process() { sudo ps -ax | grep $1; }
icloud-drive() { cp $1 /Users/davejr/Library/Mobile Documents/com~apple~CloudDocs ; }
mod() { sudo chmod 700 $1; }


# ===================================================================#
#	Web Development
# ===================================================================#

#	PythonAnywhere
# ========================= #
alias pythonanywhere="ssh dave4jr@ssh.pythonanywhere.com"
alias cmaclone='git clone https://github.com/dave4jr/cma.git'
alias csclone='git clone https://github.com/dave4jr/centerstack.git'
alias bondclone='git clone https://github.com/dave4jr/bond6.git'
alias bsclone='git clone https://github.com/dave4jr/brundagesmith.git'



#	Dev Templates
# ========================================= #
alias pythontemplate='edit /sys/sublime/templates/python.py'


#	Python
# ========================================= #
alias pipupdatepip='pip install --upgrade pip'
alias pipupdate='pip install --upgrade pip && pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U'
function install_req { pip install -r /sys/virtual-envs/$1/requirements.txt; }
function pipu { pip uninstall $1; pip list; }
alias pipuninstallall='pip freeze | grep -v "^-e" | xargs pip uninstall -y'
# alias pipinstalldjango {
# 	pip install django 
# }

#	Django
# ========================================= #
alias env_project='basename $VIRTUAL_ENV'

function activate {
	venv="$1";
	workon $venv;
	if [[ $(env_project) == "centerstack" ]]; then
		export PYTHONPATH=/sys/centerstack/site:/sys/centerstack/site/apps:$PYTHONPATH;
	else
		export PYTHONPATH=/sys/centerstack/projects/$(env_project)/site:/sys/centerstack/projects/$(env_project)/site/apps:$PYTHONPATH;
	fi
}
function ds {
	if [[ $(env_project) == "centerstack" ]]; then
		export PYTHONPATH=/sys/centerstack/site:/sys/centerstack/site/apps:$PYTHONPATH;
		python "/sys/centerstack/site/manage.py" runserver;
	else
		export PYTHONPATH=/sys/centerstack/projects/$(env_project)/site:/sys/centerstack/projects/$(env_project)/site/apps:$PYTHONPATH;
		python "/sys/centerstack/projects/$(env_project)/site/manage.py" runserver;
	fi
}
function manage {
	if [[ $(env_project) == "centerstack" ]]; then
		export PYTHONPATH=/sys/centerstack/site:/sys/centerstack/site/apps:$PYTHONPATH;
		python "/sys/centerstack/site/manage.py" "$*";
	else
		export PYTHONPATH=/sys/centerstack/projects/$(env_project)/site:/sys/centerstack/projects/$(env_project)/site/apps:$PYTHONPATH;
		python "/sys/centerstack/projects/$(env_project)/site/manage.py" "$*";
	fi
}
function startapp {
	appname=$1;
	if [[ $(env_project) == "centerstack" ]]; then
		export PYTHONPATH=/sys/centerstack/site:/sys/centerstack/site/apps:$PYTHONPATH;
		cd /sys/centerstack/site/apps;
		django-admin startapp $appname;
	else
		export PYTHONPATH=/sys/centerstack/projects/$(env_project)/site:/sys/centerstack/projects/$(env_project)/site/apps:$PYTHONPATH;
		cd /sys/centerstack/projects/$(env_project)/site/apps;
		django-admin startapp $appname;
	fi
}
function startproject {
	projectname=$1;
	if [[ $(env_project) == "centerstack" ]]; then
		export PYTHONPATH=/sys/centerstack/site:/sys/centerstack/site/apps:$PYTHONPATH;
		cd /sys/centerstack;
		django-admin startproject $projectname;
		mv $projectname "site" && cd site;
		setvirtualenvproject $(env_project) $(pwd);
	else
		export PYTHONPATH=/sys/centerstack/projects/$(env_project)/site:/sys/centerstack/projects/$(env_project)/site/apps:$PYTHONPATH;
		cd /sys/centerstack/projects/$(env_project);
		django-admin startproject $projectname;
		mv $projectname "site" && cd site;
		setvirtualenvproject $(env_project) $(pwd);
	fi
}
function rmapp {
	appname=$1;
	if [[ $(env_project) == "centerstack" ]]; then
		export PYTHONPATH=/sys/centerstack/site:/sys/centerstack/site/apps:$PYTHONPATH;
		cd /sys/centerstack/site/apps;
		rm $appname;
	else
		export PYTHONPATH=/sys/centerstack/projects/$(env_project)/site:/sys/centerstack/projects/$(env_project)/site/apps:$PYTHONPATH;
		cd /sys/centerstack/projects/$(env_project)/site/apps;
		rm $appname;
	fi
}
function make {
	appname=$1;
	if [[ $(env_project) == "centerstack" ]]; then
		python "/sys/centerstack/site/manage.py" makemigrations $appname;
	else
		python "/sys/centerstack/projects/$(env_project)/site/manage.py" makemigrations $appname;
	fi
}
function migrate {
	appname=$1;
	if [[ $(env_project) == "centerstack" ]]; then
		python "/sys/centerstack/site/manage.py" makemigrations $appname;
		python "/sys/centerstack/site/manage.py" migrate $appname;
	else
		python "/sys/centerstack/projects/$(env_project)/site/manage.py" makemigrations $appname;
		python "/sys/centerstack/projects/$(env_project)/site/manage.py" migrate $appname;
	fi
}
function shell {
	if [[ $(env_project) == "centerstack" ]]; then
		python "/sys/centerstack/site/manage.py" shell_plus --plain;
	else
		python "/sys/centerstack/projects/$(env_project)/site/manage.py" shell_plus --plain;
	fi
}
function checkdeploy {
	appname=$1;
	if [[ $(env_project) == "centerstack" ]]; then
		python "/sys/centerstack/site/manage.py" check --deploy;
	else
		python "/sys/centerstack/projects/$(env_project)/site/manage.py" check --deploy;
	fi
}
function cddjango {
	cd "/sys/virtual-envs/$(env_project)/lib/python2.7/site-packages/django"
}
function cdpython {
	cd "/sys/virtual-envs/$(env_project)/lib/python2.7/site-packages/"
}
function cdfiler {
	cd "/sys/virtual-envs/$(env_project)/lib/python2.7/site-packages/filer"
}
alias cdpy='cd /usr/local/lib/python2.7/site-packages/'


# Alias to activate(a) each virtual env which also exports the correct python path
alias acs='activate centerstack && clear'
alias abond='activate bond6 && clear'
alias acentro='activate centro && clear'
alias acma='activate cma && clear'
alias acave='activate cave && clear'
alias abs='activate bs && clear'
alias amigration='activate migration && clear'



#	Virtualenvwrapper
# ========================================= #
alias runcs='activate cs && ds'
alias runbond='activate bond && ds'
alias runcma='activate cma && ds'
alias runcentro='activate centro && ds'
alias runcave='activate cave && ds'
alias runbs='activate bs && ds'
alias runmigration='activate migration && ds'

function mkreq { cd $VIRTUAL_ENV; pip freeze > requirements.txt; req=$VIRTUAL_ENV/requirements.txt; }


# Postgres
alias pgstart='pg_ctl -D /sys/server/postgres -l /sys/server/postgres/server.log start'
alias pgstop='pg_ctl -D /sys/server/postgres stop -s -m fast'

# Nginx and Apache
alias nginxStart='sudo nginx; echo "starting nginx server..."'
alias nginxStop='sudo nginx -s stop; echo "stopping nginx server..."'
alias nginxRestart='sudo nginx -s reload'
alias nginxQuit='nginx -s quit'
alias nginxEdit='edit /usr/local/etc/nginx/nginx.conf'
alias apacheRestart='sudo apachectl graceful'           			# apacheRestart:    Restart Apache
alias apacheEdit='sudo edit /etc/httpd/httpd.conf'      			# apacheEdit:       Edit httpd.conf
alias apacheLogs="less +F /var/log/apache2/error_log"   			# Apachelogs:   Shows apache error logs

# Hosts
alias hosts='edit /etc/hosts'
alias newhost='hosts; nginxEdit'
httpHeaders () { /usr/bin/curl -I -L $@ ; }             				# httpHeaders:      Grabs headers from web page
httpDebug () { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }		#   httpDebug:  Download a web page and show info on what took time

# Homebrew
alias brewclean='brew update && brew upgrade brew-cask && brew cleanup && brew cask cleanup'
function brewlist { echo ""; echo "Homebrew"; echo "---------"; brew list; echo ""; echo "Homebrew Cask"; echo "--------------"; brew cask list; echo ""; }
function brewupdate { echo ""; echo "Homebrew"; echo "---------"; brew update; echo ""; echo "Homebrew Cask"; echo "--------------"; brew cask update; echo ""; }
function brewsearch { search_item="$1"; printf "\nHomebrew\n----------\n"; brew search $search_item; printf "\nCaskroom\n------------\n"; brew cask search $search_item; }
function brewsearchfonts { brew cask search "/$1/"; }
function brewinstallfonts { brew cask install "font-$1"; }


# Potrace (Convert from Bitmap to SVG)
# Note: use --group below instead of --flat if you want to group related SVG paths instead of make them all the same path
function svg {
	file=$1;
	potrace --svg --flat $file;
}
function len {
	str="$1";
	echo ${#str};
}

# HTTrack (pulling website source files)
function saveurl2 {
	site="$1";
	siteformal="http://$site/";
	save_location="/sys/os/httrack";
	cd $save_location;
	mkdir $site;
	path="$save_location/$site";
	httrack "$siteformal" -O "$path" "+*${site:3}/*" -v;
}
function saveurl {
	url="$1";
	httrack "$url" -O "$(pwd)" "+*${site:3}/*" -v;
}
alias cdsaveurl="cd /sys/os/httrack"


#	Javascript
# ========================================= #
alias jsrc='edit /sys/sublime/.jsbeautifyrc'



# ===================================================================#
#	Network
# ===================================================================#
alias localip="ipconfig getifaddr en0"
alias privateip="localip"
alias publicip="dig +short myip.opendns.com @resolver1.opendns.com"
alias routerip="ipconfig getoption en0 router"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias dns-ip="ipconfig getoption en0 domain_name_server"
alias dns-domain="ipconfig getoption en0 domain_name"
alias subnet-ip="ipconfig getoption en0 subnet_mask"
alias leasetime="ipconfig getoption en0 subnet_mask"
function portscan {
	ip="$1";
	sudo nmap -T5 $ip.0/24
}
function pingcan {
	ip="$1";
	sudo nmap -sP $ip.0/24
}
function detecthost {
	ip="$1";
	sudo nmap -O $ip.0/24
}
# alias portscan="sudo nmap -T5 10.0.1.0/24"
# alias portscan2="sudo nmap -T5 192.168.1.0/24"
# alias pingscan="sudo nmap -sP 10.0.1.0/24"
# alias pingscan2="sudo nmap -sP 192.168.1.0/24"
# alias detecthost="sudo nmap -O 10.0.1.0/24"
# alias detecthost2="sudo nmap -O 192.168.1.0/24"
detectdaemon() { sudo nmap -sV $1 ; }
alias detectdaemon2="sudo nmap -sV 192.168.1.254"
alias netCons='lsof -i'									# netCons:			Show all open TCP/IP sockets
alias flushDNS='dscacheutil -flushcache'						# flushDNS:		Flush out the DNS Cache
alias lsock='sudo /usr/sbin/lsof -i -P'						# lsock:			Display open sockets
alias lsockU='sudo /usr/sbin/lsof -nP | grep UDP'				# lsockU:			Display only open UDP sockets
alias lsockT='sudo /usr/sbin/lsof -nP | grep TCP'				# lsockT:			Display only open TCP sockets
alias ipInfo0='ipconfig getpacket en0'              				# ipInfo0:			Get info on connections for en0
alias ipInfo1='ipconfig getpacket en1'             					# ipInfo1:			Get info on connections for en1
alias openPorts='sudo lsof -i | grep LISTEN'        				# openPorts:		All listening connections
alias showBlocked='sudo ipfw list'                  				# showBlocked:		All ipfw rules inc/ blocked IPs
alias map="xargs -n1"
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"	# sniff:			View all IP traffic
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""
hostInfo() {											# hostInfo:				display useful host related informaton
	echo -e "\nYou are logged on ${RED}$HOST"
	echo -e "\nAdditionnal information:$NC " ; uname -a
	echo -e "\n${RED}Users logged on:$NC " ; w -h
	echo -e "\n${RED}Current date :$NC " ; date
	echo -e "\n${RED}Machine stats :$NC " ; uptime
	echo -e "\n${RED}Current network location :$NC " ; scselect
	echo -e "\n${RED}Public facing IP Address :$NC " ;myip
	echo
}

# Android Debug Bridge (ADB)
function adbconnect() {
	adb kill-server; adb start-server; adb connect 10.0.1.$1
}
alias adbconnect2='adb kill-server; adb start-server; adb connect 10.0.1.42'


# ===================================================================#
#	System Operations & Management
# ===================================================================#
alias mountReadWrite='/sbin/mount -uw /'    							# mountReadWrite:   For use when booted into single-user
alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"				#   cleanupDS:  Recursively delete .DS_Store files
alias cleanupLS="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"	#   cleanupLS:  Clean up LaunchServices to remove duplicates in the "Open With" menu
alias showhidden='defaults write com.apple.finder ShowAllFiles TRUE'	#   finderShowHidden:   Show hidden files in Finder
alias hidehidden='defaults write com.apple.finder ShowAllFiles FALSE'	#   finderHideHidden:   Hide hidden files in Finder
function len() { string=$1; echo ${#string}; }



# ===================================================================#
#	Tab Completion
# ===================================================================#
if [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion
fi


# Enable tab completion for `g` by marking it as an alias for `git`
if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
	complete -o default -o nospace -F _git g;
fi

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;

# Add tab completion for `defaults read|write NSGlobalDomain`
complete -W "NSGlobalDomain" defaults;

# Add `killall` tab completion for common apps
complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall;





# ===================================================================#
#	Colors - Terminal Prompot
# ===================================================================#
Black="\e[0;30m"
Blue="\e[0;34m"
Green="\e[0;32m"
Cyan="\e[0;36m"
Red="\e[0;31m"
Purple="\e[0;35m"
Brown="\e[0;33m"
Gray="\e[0;37m"
Dark_Gray="\e[1;30m"
Dark_Blue="\e[1;34m"
Dark_Green="\e[1;32m"
Dark_Cyan="\e[1;36m"
Dark_Red="\e[1;31m"
Dark_Purple="\e[1;35m"
Yellow="\e[1;33m"
White="\e[1;37m"
end="\e[0m"

# LS Color Options
#a = black			B = bold red
#b = red			C = bold green
#c = green			D = yellow
#d = brown			E = bold blue
#e = blue			F = magenta
#f = magenta		G = cyan
#g = cyan			H = white
#h = grey			x = default
#A = dark grey

export CLICOLOR=true
export CLICOLOR_FORCE=true

new_line=false
function ps_1 {
	if $new_line; then
		echo "-----------------------------------------------------------"
	else
		echo -n
		new_line=true
	fi
}
PROMPT_COMMAND='ps_1'
export PS1="\[$Cyan\]\u \[$Brown\]\w \$ \[$Black\]  "
export LSCOLORS="excxbxdxcxexexfxdxgxdx"



##
# Your previous /Users/davejr/.bash_profile file was backed up as /Users/davejr/.bash_profile.macports-saved_2016-05-13_at_03:28:32
##

# MacPorts Installer addition on 2016-05-13_at_03:28:32: adding an appropriate PATH variable for use with MacPorts.
export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
# Finished adapting your PATH environment variable for use with MacPorts.

